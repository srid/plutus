(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl trace (all a (type) (fun (con string) (fun a a))))
      (abs a (type) (lam t (con string) (lam a a a)))
    )
    (lam
      ds
      Bool
      [
        [
          { [ Bool_match ds ] Unit }
          (lam p (prod ) [ [ { trace Unit } (con string "yes") ] Unit ])
        ]
        (lam
          p
          (prod )
          (let
            (nonrec)
            (termbind
              (strict)
              (vardecl thunk (con unit))
              [
                {
                  [ Unit_match [ [ { trace Unit } (con string "no") ] Unit ] ]
                  (con unit)
                }
                (lam p (prod ) (con unit ()))
              ]
            )
            (error Unit)
          )
        )
      ]
    )
  )
)