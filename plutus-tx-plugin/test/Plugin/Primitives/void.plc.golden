(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict) (vardecl fail (fun (con unit) Bool)) (lam ds (con unit) False)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
          [ [ [ { ifThenElse Bool } [ [ equalsInteger x ] y ] ] True ] False ]
        )
      )
    )
    (lam
      ds
      (con integer)
      (lam
        ds
        (con integer)
        [
          [
            { [ Bool_match [ [ equalsInteger ds ] ds ] ] Bool }
            (lam
              p
              (prod )
              [
                [
                  { [ Bool_match [ [ equalsInteger ds ] ds ] ] Bool }
                  (lam p (prod ) True)
                ]
                (lam p (prod ) [ fail (con unit ()) ])
              ]
            )
          ]
          (lam p (prod ) [ fail (con unit ()) ])
        ]
      )
    )
  )
)