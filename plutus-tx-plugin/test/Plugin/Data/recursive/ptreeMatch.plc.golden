(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl B (fun (type) (type)))
          (tyvardecl a (type))
          B_match
          (vardecl One (fun a [ B a ]))
          (vardecl Two (fun [ B [ [ Tuple2 a ] a ] ] [ B a ]))
        )
      )
      (lam
        ds
        [ B (con integer) ]
        [
          [
            { [ { B_match (con integer) } ds ] (con integer) }
            (lam
              p
              (prod (con integer))
              (let
                (nonrec)
                (termbind (strict) (vardecl a (con integer)) (proj 0 p))
                a
              )
            )
          ]
          (lam
            p
            (prod [ B [ [ Tuple2 (con integer) ] (con integer) ] ])
            (let
              (nonrec)
              (termbind
                (strict)
                (vardecl ds [ B [ [ Tuple2 (con integer) ] (con integer) ] ])
                (proj 0 p)
              )
              (con integer 2)
            )
          )
        ]
      )
    )
  )
)