(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Tuple2 (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        Tuple2_match
        (vardecl Tuple2 (fun a (fun b [ [ Tuple2 a ] b ])))
      )
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
    )
    (lam
      t
      [ [ Tuple2 (con integer) ] (con integer) ]
      (let
        (nonrec)
        (termbind
          (nonstrict)
          (vardecl wild [ [ Tuple2 (con integer) ] (con integer) ])
          t
        )
        [
          {
            [ { { Tuple2_match (con integer) } (con integer) } t ] (con integer)
          }
          (lam
            p
            (prod (con integer) (con integer))
            (let
              (nonrec)
              (termbind (strict) (vardecl ds (con integer)) (proj 0 p))
              (termbind (strict) (vardecl ds (con integer)) (proj 1 p))
              [
                [ addInteger ds ]
                [
                  {
                    [ { { Tuple2_match (con integer) } (con integer) } wild ]
                    (con integer)
                  }
                  (lam
                    p
                    (prod (con integer) (con integer))
                    (let
                      (nonrec)
                      (termbind (strict) (vardecl a (con integer)) (proj 0 p))
                      (termbind (strict) (vardecl ds (con integer)) (proj 1 p))
                      a
                    )
                  )
                ]
              ]
            )
          )
        ]
      )
    )
  )
)