(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl MyPolyData (fun (type) (fun (type) (type))))
        (tyvardecl a (type)) (tyvardecl b (type))
        MyPolyData_match
        (vardecl Poly (fun a (fun b [ [ MyPolyData a ] b ])))
        (vardecl Poly (fun a [ [ MyPolyData a ] b ]))
      )
    )
    (lam
      ds
      [ [ MyPolyData (con integer) ] (con integer) ]
      [
        [
          {
            [ { { MyPolyData_match (con integer) } (con integer) } ds ]
            (con integer)
          }
          (lam
            p
            (prod (con integer) (con integer))
            (let
              (nonrec)
              (termbind (strict) (vardecl a (con integer)) (proj 0 p))
              (termbind (strict) (vardecl ds (con integer)) (proj 1 p))
              a
            )
          )
        ]
        (lam
          p
          (prod (con integer))
          (let
            (nonrec)
            (termbind (strict) (vardecl ipv (con integer)) (proj 0 p))
            (con integer 2)
          )
        )
      ]
    )
  )
)