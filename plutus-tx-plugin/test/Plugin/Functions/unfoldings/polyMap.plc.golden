(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
    )
    (let
      (rec)
      (datatypebind
        (datatype
          (tyvardecl List (fun (type) (type)))
          (tyvardecl a (type))
          Nil_match
          (vardecl Nil [ List a ])
          (vardecl Cons (fun a (fun [ List a ] [ List a ])))
        )
      )
      (let
        (nonrec)
        (termbind
          (strict)
          (vardecl
            build
            (all
              a
              (type)
              (fun (all b (type) (fun (fun a (fun b b)) (fun b b))) [ List a ])
            )
          )
          (abs
            a
            (type)
            (lam
              g
              (all b (type) (fun (fun a (fun b b)) (fun b b)))
              [ [ { g [ List a ] } { Cons a } ] { Nil a } ]
            )
          )
        )
        (let
          (rec)
          (termbind
            (strict)
            (vardecl
              mapDirect
              (all
                a
                (type)
                (all b (type) (fun (fun a b) (fun [ List a ] [ List b ])))
              )
            )
            (abs
              a
              (type)
              (abs
                b
                (type)
                (lam
                  f
                  (fun a b)
                  (lam
                    l
                    [ List a ]
                    [
                      [
                        { [ { Nil_match a } l ] [ List b ] }
                        (lam p (prod ) { Nil b })
                      ]
                      (lam
                        p
                        (prod a [ List a ])
                        (let
                          (nonrec)
                          (termbind (strict) (vardecl x a) (proj 0 p))
                          (termbind (strict) (vardecl xs [ List a ]) (proj 1 p))
                          [
                            [ { Cons b } [ f x ] ]
                            [ [ { { mapDirect a } b } f ] xs ]
                          ]
                        )
                      )
                    ]
                  )
                )
              )
            )
          )
          [
            [
              { { mapDirect (con integer) } (con integer) }
              [ addInteger (con integer 1) ]
            ]
            [
              { build (con integer) }
              (abs
                a
                (type)
                (lam
                  c
                  (fun (con integer) (fun a a))
                  (lam
                    n a [ [ c (con integer 0) ] [ [ c (con integer 1) ] n ] ]
                  )
                )
              )
            ]
          ]
        )
      )
    )
  )
)