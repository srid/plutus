(program
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl List (fun (type) (type)))
        (tyvardecl a (type))
        Nil_match
        (vardecl Nil [ List a ])
        (vardecl Cons (fun a (fun [ List a ] [ List a ])))
      )
    )
    (let
      (nonrec)
      (termbind
        (strict)
        (vardecl
          addInteger (fun (con integer) (fun (con integer) (con integer)))
        )
        (builtin addInteger)
      )
      (termbind
        (strict)
        (vardecl
          addInteger (fun (con integer) (fun (con integer) (con integer)))
        )
        (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
      )
      (let
        (rec)
        (termbind
          (strict)
          (vardecl sum (fun [ List (con integer) ] (con integer)))
          (lam
            ds
            [ List (con integer) ]
            [
              [
                { [ { Nil_match (con integer) } ds ] (con integer) }
                (lam p (prod ) (con integer 0))
              ]
              (lam
                p
                (prod (con integer) [ List (con integer) ])
                (let
                  (nonrec)
                  (termbind (strict) (vardecl x (con integer)) (proj 0 p))
                  (termbind
                    (strict) (vardecl xs [ List (con integer) ]) (proj 1 p)
                  )
                  [ [ addInteger x ] [ sum xs ] ]
                )
              )
            ]
          )
        )
        sum
      )
    )
  )
)