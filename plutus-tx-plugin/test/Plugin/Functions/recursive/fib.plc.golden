(program
  (let
    (nonrec)
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (builtin addInteger)
    )
    (termbind
      (strict)
      (vardecl addInteger (fun (con integer) (fun (con integer) (con integer))))
      (lam x (con integer) (lam y (con integer) [ [ addInteger x ] y ]))
    )
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) (con bool))))
      (builtin equalsInteger)
    )
    (termbind
      (strict)
      (vardecl ifThenElse (all a (type) (fun (con bool) (fun a (fun a a)))))
      (builtin ifThenElse)
    )
    (termbind
      (strict)
      (vardecl equalsInteger (fun (con integer) (fun (con integer) Bool)))
      (lam
        x
        (con integer)
        (lam
          y
          (con integer)
          [ [ [ { ifThenElse Bool } [ [ equalsInteger x ] y ] ] True ] False ]
        )
      )
    )
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (builtin subtractInteger)
    )
    (termbind
      (strict)
      (vardecl
        subtractInteger (fun (con integer) (fun (con integer) (con integer)))
      )
      (lam x (con integer) (lam y (con integer) [ [ subtractInteger x ] y ]))
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl fib (fun (con integer) (con integer)))
        (lam
          n
          (con integer)
          [
            [
              {
                [ Bool_match [ [ equalsInteger n ] (con integer 0) ] ]
                (con integer)
              }
              (lam p (prod ) (con integer 0))
            ]
            (lam
              p
              (prod )
              [
                [
                  {
                    [ Bool_match [ [ equalsInteger n ] (con integer 1) ] ]
                    (con integer)
                  }
                  (lam p (prod ) (con integer 1))
                ]
                (lam
                  p
                  (prod )
                  [
                    [
                      addInteger
                      [ fib [ [ subtractInteger n ] (con integer 1) ] ]
                    ]
                    [ fib [ [ subtractInteger n ] (con integer 2) ] ]
                  ]
                )
              ]
            )
          ]
        )
      )
      fib
    )
  )
)