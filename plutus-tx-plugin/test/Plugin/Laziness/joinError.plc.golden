(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl Bool (type))

        Bool_match
        (vardecl True Bool) (vardecl False Bool)
      )
    )
    (datatypebind
      (datatype (tyvardecl Unit (type))  Unit_match (vardecl Unit Unit))
    )
    (termbind
      (strict)
      (vardecl error (all a (type) (fun (con unit) a)))
      (abs a (type) (lam thunk (con unit) (error a)))
    )
    (termbind (strict) (vardecl unitval (con unit)) (con unit ()))
    (termbind (nonstrict) (vardecl joinError Unit) [ { error Unit } unitval ])
    (termbind
      (strict)
      (vardecl joinError (fun Bool (fun Bool Unit)))
      (lam
        x
        Bool
        (lam
          y
          Bool
          [
            [
              { [ Bool_match x ] Unit }
              (lam
                p
                (prod )
                [
                  [ { [ Bool_match y ] Unit } (lam p (prod ) joinError) ]
                  (lam p (prod ) Unit)
                ]
              )
            ]
            (lam p (prod ) Unit)
          ]
        )
      )
    )
    joinError
  )
)