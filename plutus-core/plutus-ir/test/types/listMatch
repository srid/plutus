(lam x (con integer)
(let (rec)
  (termbind (strict) (vardecl j (con integer)) [(builtin addInteger) (con integer 3) x])
  (datatypebind
    (datatype
      (tyvardecl List (fun (type) (type)))
      (tyvardecl a (type))
      match_List
      (vardecl Nil [List a]) (vardecl Cons (fun a (fun [List a] [List a])))
    )
  )
  [
    [
      {
        [{match_List (all a (type) (fun a a))} {Nil (all a (type) (fun a a))}]
        (all a (type) (fun a a))
      }
      (lam dead (prod ) (abs a (type) (lam x a x)))
    ]
    (lam p (prod (all a (type) (fun a a)) [List (all a (type) (fun a a))]) (proj 0 p))
  ]
)
)
