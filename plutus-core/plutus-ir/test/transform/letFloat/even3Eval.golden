(let
  (nonrec)
  (datatypebind
    (datatype
      (tyvardecl Bool (type))

      match_Bool
      (vardecl True Bool) (vardecl False Bool)
    )
  )
  (let
    (rec)
    (datatypebind
      (datatype
        (tyvardecl Nat (type))

        match_Nat
        (vardecl Zero Nat) (vardecl Suc (fun Nat Nat))
      )
    )
    (let
      (rec)
      (termbind
        (strict)
        (vardecl even (fun Nat Bool))
        (lam
          n
          Nat
          [
            [ { [ match_Nat n ] Bool } (lam p (prod ) True) ]
            (lam p (prod Nat) [ odd (proj 0 p) ])
          ]
        )
      )
      (termbind
        (strict)
        (vardecl odd (fun Nat Bool))
        (lam
          n
          Nat
          [
            [ { [ match_Nat n ] Bool } (lam p (prod ) False) ]
            (lam p (prod Nat) [ even (proj 0 p) ])
          ]
        )
      )
      (let
        (nonrec)
        (termbind (strict) (vardecl three Nat) [ Suc [ Suc [ Suc Zero ] ] ])
        [ even three ]
      )
    )
  )
)